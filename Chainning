import java.util.LinkedList;
import java.util.Scanner;

class Hash {
    public int tableSize;
    public LinkedList<Integer>[] table;

    public Hash(int tableSize) {
        this.tableSize = tableSize;
        table = new LinkedList[tableSize];
        for (int i = 0; i < tableSize; i++) {
            table[i] = new LinkedList<>();
        }
    }

    public int hashFunction(int key) {
        return key % tableSize;
    }

    public void insert(int key) {
        int index = hashFunction(key);
        table[index].add(key);
    }

    public boolean search(int key) {
        int index = hashFunction(key);
        return table[index].contains(key);
    }

    public void display() {
        for (int i = 0; i < tableSize; i++) {
            System.out.print("Index " + i + ": ");
            for (int key : table[i]) {
                System.out.print(key + " --> ");
            }
            System.out.println("Null");
        }
    }
}

public class HashChaining {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.println("Enter the size of Hash Table: ");
        int tableSize = sc.nextInt();

        Hash hashTable = new Hash(tableSize);

        System.out.println("Enter the number of keys: ");
        int numKeys = sc.nextInt();

        for (int i = 0; i < numKeys; i++) {
            System.out.println("Enter key " + (i + 1) + ": ");
            int key = sc.nextInt();
            hashTable.insert(key);
        }

        while (true) {
            System.out.println("Enter the operation you want to perform:");
            System.out.println("1. Insert");
            System.out.println("2. Display Hash Table");
            System.out.println("3. Search");
            System.out.println("4. Exit");
            int choice = sc.nextInt();

            switch (choice) {
                case 1:
                    System.out.println("Enter the key to insert: ");
                    int newKey = sc.nextInt();
                    hashTable.insert(newKey);
                    break;

                case 2:
                    hashTable.display();
                    break;

                case 3:
                    System.out.println("Enter the key to search: ");
                    int searchKey = sc.nextInt();
                    boolean found = hashTable.search(searchKey);
                    if (found) {
                        System.out.println("Key " + searchKey + " found in the hash table.");
                    } else {
                        System.out.println("Key " + searchKey + " not found in the hash table.");
                    }
                    break;

                case 4:
                    System.out.println("Exiting....");
                    sc.close();
                    return;

                default:
                    System.out.println("Invalid choice, try again....");
            }
        }
    }
}
